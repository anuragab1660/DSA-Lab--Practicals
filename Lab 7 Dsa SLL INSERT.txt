#include <iostream>
using namespace std;

// Node structure for a singly linked list
struct Node {
    int data;
    Node* next;

    // Constructor
    Node(int val) : data(val), next(nullptr) {}
};

// Class representing a singly linked list
class SinglyLinkedList {
private:
    Node* head; // Pointer to the head of the linked list

public:
    // Constructor
    SinglyLinkedList() : head(nullptr) {}

    // Function to insert a node at the front of the linked list
    void insertAtFront(int val) {
        Node* newNode = new Node(val);
        newNode->next = head;
        head = newNode;
        cout << "Inserted " << val << " at the front of the linked list." << endl;
    }

    // Function to insert a node at the end of the linked list
    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
        cout << "Inserted " << val << " at the end of the linked list." << endl;
    }

    // Function to insert a node in ascending order based on data field
    void insertInAscendingOrder(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr || head->data >= val) {
            newNode->next = head;
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr && temp->next->data < val) {
                temp = temp->next;
            }
            newNode->next = temp->next;
            temp->next = newNode;
        }
        cout << "Inserted " << val << " in ascending order." << endl;
    }

    // Function to display the linked list
    void display() {
        if (head == nullptr) {
            cout << "Linked list is empty." << endl;
            return;
        }
        cout << "Linked list: ";
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    SinglyLinkedList sll;

    sll.insertAtFront(10);
    sll.insertAtFront(20);
    sll.display();

    sll.insertAtEnd(30);
    sll.insertAtEnd(40);
    sll.display();

    sll.insertInAscendingOrder(25);
    sll.display();
    sll.insertInAscendingOrder(5);
    sll.display();
    sll.insertInAscendingOrder(35);
    sll.display();

    return 0;
}
