#include <iostream>
using namespace std;

// Node structure for a singly linked list
struct Node {
    int data;
    Node* next;

    // Constructor
    Node(int val) : data(val), next(nullptr) {}
};

// Class representing a singly linked list
class SinglyLinkedList {
private:
    Node* head; // Pointer to the head of the linked list

public:
    // Constructor
    SinglyLinkedList() : head(nullptr) {}

    // Function to insert a node at the front of the linked list
    void insertAtFront(int val) {
        Node* newNode = new Node(val);
        newNode->next = head;
        head = newNode;
        cout << "Inserted " << val << " at the front of the linked list." << endl;
    }

    // Function to display the linked list
    void display() {
        if (head == nullptr) {
            cout << "Linked list is empty." << endl;
            return;
        }
        cout << "Linked list: ";
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }

    // Function to delete the first node of the linked list
    void deleteFirstNode() {
        if (head == nullptr) {
            cout << "Linked list is empty. Nothing to delete." << endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
        cout << "First node deleted from the linked list." << endl;
    }

    // Function to delete the node before a specified position
    void deleteNodeBeforePosition(int pos) {
        if (head == nullptr || head->next == nullptr || pos <= 1) {
            cout << "Invalid operation. Nothing to delete." << endl;
            return;
        }
        Node* prev = nullptr;
        Node* curr = head;
        int count = 1;
        while (curr != nullptr && count < pos - 1) {
            prev = curr;
            curr = curr->next;
            ++count;
        }
        if (prev == nullptr) {
            cout << "Cannot delete node before position " << pos << ". No node exists before it." << endl;
            return;
        }
        prev->next = curr->next;
        delete curr;
        cout << "Node before position " << pos << " deleted from the linked list." << endl;
    }

    // Function to delete the node after a specified position
    void deleteNodeAfterPosition(int pos) {
        if (head == nullptr || head->next == nullptr) {
            cout << "Invalid operation. Nothing to delete." << endl;
            return;
        }
        Node* curr = head;
        int count = 1;
        while (curr != nullptr && count < pos) {
            curr = curr->next;
            ++count;
        }
        if (curr == nullptr || curr->next == nullptr) {
            cout << "Cannot delete node after position " << pos << ". No node exists after it." << endl;
            return;
        }
        Node* temp = curr->next;
        curr->next = temp->next;
        delete temp;
        cout << "Node after position " << pos << " deleted from the linked list." << endl;
    }
};

int main() {
    SinglyLinkedList sll;

    sll.insertAtFront(10);
    sll.insertAtFront(20);
    sll.insertAtFront(30);
    sll.insertAtFront(40);
    sll.display();

    sll.deleteFirstNode();
    sll.display();

    sll.deleteNodeBeforePosition(3);
    sll.display();

    sll.deleteNodeAfterPosition(1);
    sll.display();

    return 0;
}
